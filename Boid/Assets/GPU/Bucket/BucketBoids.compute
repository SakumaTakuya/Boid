#pragma kernel SimulateCS
#pragma kernel SortCS
#pragma kernel SetLastCS

//Boidの構造体
struct Boid
{
    float3 velocity;
    float3 position;
    int id;//バケット位置を追加
};

//スレッドグループのスレッドサイズ
#define BLOCK_SIZE 256

//BoidデータBuffer
RWStructuredBuffer<Boid> _BoidBuffer;//ソートを想定して_BoidsNum + 1の大きさにしておく
RWStructuredBuffer<int> _LastIDBuffer;

uint _BoidsNum;
float _DeltaTime;

float _Mass;

float _SeparateRadius;
float _SeparateWeight;
float _AlignmentRadius;
float _AlignmentWeight;
float _CohesionRadius;
float _CohesionWeight;

float _AvoidingPower;

float3 _WallMax;
float3 _WallMin;

float _MaxSpeed;
float _MaxSteerForce;

float _BucketLength;
int _BucketSizeX;
int _BucketSizeXY;
float3 _BucketMin;

uint _Length;
uint _Target;

float3 Clamp(float3 vec, float max)
{
    float len = sqrt(dot(vec, vec));
    return (len > max && len > 0) ? normalize(vec) * max  : vec;
}

//ある軸方向のバケット位置を取得する
int GetBucketAxisID(float axis, float min)
{
    return (int)((axis - min) / _BucketLength);
}

//3次元のIDを1次元へと変換する
int AdjustBucketID(int x, int y, int z)
{
    return x + y * _BucketSizeX + z * _BucketSizeXY;
}  

[numthreads(BLOCK_SIZE, 1, 1)]
void SimulateCS(uint3 DTid : SV_DispatchThreadID)
{
    const int pId = DTid.x;
    Boid pBoid = _BoidBuffer[pId];
    Boid nBoid;

    float3 sepSum = (float3)0.0;
    float3 aliSum = (float3)0.0;
    float3 cohSum = (float3)0.0;
    
    uint sepCnt = 0;
    uint aliCnt = 0;
    uint cohCnt = 0;    

    //各方向のバケット位置を取得     
    int bX = GetBucketAxisID(pBoid.position.x, _BucketMin.x);
    int bY = GetBucketAxisID(pBoid.position.y, _BucketMin.y);
    int bZ = GetBucketAxisID(pBoid.position.z, _BucketMin.z);
    
    //コライダーがないため、全Boidとの距離を測り、一定以内なら処理を行う
    //それぞれ一つ隣から探索開始
    for(int z = bZ - 1; z <= bZ + 1; z++) {
    for(int y = bY - 1; y <= bY + 1; y++) {
    for(int x = bX - 1; x <= bX + 1; x++)
    {
        int id = AdjustBucketID(x, y, z);//隣接バケットのバケットIDを取得
        int nId = _LastIDBuffer[id];//そのバケットに属するBoidの中でBoid配列の最後尾にあるものの配列位置を取り出す     
        
       	while(true)
       	{
       	    if(--nId == -1) break;//配列から抜けてしまったら終了(本当は番兵を用意したい)
       	    if(nId == pId) continue;//自分自身とは計算を行わない
            nBoid = _BoidBuffer[nId];   
            if(nBoid.id != id) break;//近傍BoidのバケットIDが探索中のものか確認
            
            float3 diff = pBoid.position - nBoid.position;
            float dist = sqrt(dot(diff, diff));
                         
            if(dist <= _SeparateRadius)
            {
                sepSum += diff;
                sepCnt++;
            }
                          
            if(dist <= _AlignmentRadius)
            {
                aliSum += nBoid.velocity;//今回は向いている方向＝進んでいる方向
                aliCnt++;
            }
                         
            if(dist <= _CohesionRadius)
            {
                cohSum -= diff; 
                cohCnt++;
            }                        
       	}
    }}}
   
    if(sepCnt != 0)
    {
        sepSum /= sepCnt;
    }
    
    if(aliCnt != 0)
    {
        aliSum /= aliCnt;
    }
    
    if(cohCnt != 0)
    {
        cohSum /= cohCnt;
    }
    
    float3 force = sepSum * _SeparateWeight  +
                   aliSum * _AlignmentWeight +
                   cohSum * _CohesionWeight;
                   
    if
    (
        pBoid.position.x > _WallMax.x || pBoid.position.x < _WallMin.x ||
        pBoid.position.y > _WallMax.y || pBoid.position.y < _WallMin.y ||
        pBoid.position.z > _WallMax.z || pBoid.position.z < _WallMin.z        
    )
    {
        force = -normalize(pBoid.position) * _AvoidingPower;
    }
    
    float3 acc = Clamp(force, _MaxSteerForce) / _Mass;
    
    pBoid.velocity = Clamp(acc * _DeltaTime + pBoid.velocity, _MaxSpeed);
    pBoid.position += pBoid.velocity * _DeltaTime;
    
    bX = GetBucketAxisID(pBoid.position.x, _BucketMin.x);
    bY = GetBucketAxisID(pBoid.position.y, _BucketMin.y);
    bZ = GetBucketAxisID(pBoid.position.z, _BucketMin.z);
    pBoid.id = AdjustBucketID(bX, bY, bZ); 
    
    _BoidBuffer[pId] = pBoid;   
}

[numthreads(BLOCK_SIZE, 1, 1)]
void SortCS(uint3 DTid : SV_DispatchThreadID)
{
    uint pId = DTid.x;
    uint nId = pId ^ _Target;
                    
    if(nId > pId)
    {
        Boid pBoid = _BoidBuffer[pId];
        Boid nBoid = _BoidBuffer[nId];
        
        int pi = pBoid.id;
        int ni = nBoid.id;
        
        if((pId & _Length) == 0)
        {   
            if(pi > ni)
            {
                _BoidBuffer[nId] = pBoid;
                _BoidBuffer[pId] = nBoid;                                                    
            }
        }
        else
        {        
            if(pi < ni)
            {
                _BoidBuffer[nId] = pBoid;
                _BoidBuffer[pId] = nBoid;                      
            }             
        }
    }
}

[numthreads(BLOCK_SIZE, 1, 1)]
void SetLastCS(uint3 DTid : SV_DispatchThreadID)
{
    uint pId = DTid.x;
    Boid pBoid = _BoidBuffer[pId];
        
    if(pBoid.id < _BoidBuffer[pId + 1].id)
    {
        _LastIDBuffer[pBoid.id] = pId + 1;
    } 
}