// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SortCS
#pragma kernel Sort2CS
#pragma kernel SetLastCS

uint _Length;
uint _mLen;
RWStructuredBuffer<int> _ArrayBuffer;
RWStructuredBuffer<int> _LastBuffer;

[numthreads(4, 1, 1)]
void SortCS(uint3 DTid : SV_DispatchThreadID)
{
    uint pId = DTid.x;
    int p;
    int n;
    
    for(uint len = 2; len <= _Length; len *= 2)
    {
        for(uint mlen = len / 2; mlen > 0; mlen /= 2)
        {
            uint nId = pId ^ mlen;
                
            if(nId > pId)
            {
                if((pId & len) == 0)
                {
                    p = _ArrayBuffer[pId];
                    n = _ArrayBuffer[nId];
    
                    if(p > n)
                    {
                        _ArrayBuffer[nId] = p;
                        _ArrayBuffer[pId] = n;                    
                    }
                        

                }
                else
                {
                    p = _ArrayBuffer[pId];
                    n = _ArrayBuffer[nId];
    
                    if(p < n)
                    {
                        _ArrayBuffer[nId] = p;
                        _ArrayBuffer[pId] = n;                    
                    }            
                }
            }
            AllMemoryBarrier();
            AllMemoryBarrierWithGroupSync();
        }  
    }  
}

[numthreads(4, 1, 1)]
void Sort2CS(uint3 DTid : SV_DispatchThreadID)
{
    uint pId = DTid.x;
    uint nId = pId ^ _mLen;
                
    if(nId > pId)
    {
        int p = _ArrayBuffer[pId];
        int n = _ArrayBuffer[nId];
            
        if((pId & _Length) == 0)
        {
            if(p > n)
            {
                _ArrayBuffer[nId] = p;
                _ArrayBuffer[pId] = n;                    
            }
                        
        }
        else
        {
            if(p < n)
            {
                _ArrayBuffer[nId] = p;
                _ArrayBuffer[pId] = n;                    
            }            
        }
    }    
}

[numthreads(4, 1, 1)]
void SetLastCS(uint3 DTid : SV_DispatchThreadID)
{
    uint pId = DTid.x;
    int p = _ArrayBuffer[pId];
        
    if(p < _ArrayBuffer[pId + 1])
    {
        _LastBuffer[p] = pId + 1;
    }
}